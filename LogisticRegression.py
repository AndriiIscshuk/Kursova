import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler

data = pd.DataFrame({
    'age': [25, 45, 35, 50, 23, 30, 40, 55, 60, 28],
    'income': [30000, 80000, 50000, 120000, 20000, 40000, 70000, 100000, 90000, 35000],
    'delinquencies': [0, 1, 0, 2, 3, 0, 1, 0, 2, 1],
    'cards': [1, 3, 2, 4, 0, 2, 3, 5, 2, 1],
    'bankruptcies': [0, 1, 0, 1, 1, 0, 0, 1, 0, 0],
    'loan_amount': [5000, 20000, 10000, 30000, 4000, 8000, 15000, 25000, 18000, 7000],
    'employment_years': [1, 10, 5, 15, 0, 3, 8, 20, 12, 2],
    'has_mortgage': [0, 1, 0, 1, 0, 0, 1, 1, 1, 0],
    'education_level': [1, 2, 2, 3, 0, 1, 2, 3, 2, 1],  # 0=none, 1=school, 2=college, 3=university
    'owns_car': [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    'default': [0, 1, 0, 1, 1, 0, 0, 1, 1, 0]
})

features = [
    'age', 'income', 'delinquencies', 'cards', 'bankruptcies',
    'loan_amount', 'employment_years', 'has_mortgage',
    'education_level', 'owns_car'
]
X = data[features]
y = data['default']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# üîÅ –ù–∞–≤—á–∞–Ω–Ω—è –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó
model = LogisticRegression(max_iter=1000)
model.fit(X_scaled, y)

print("\n–í–≤–µ–¥—ñ—Ç—å –∞–Ω–∫–µ—Ç—É –∫–ª—ñ—î–Ω—Ç–∞:")
def ask(question, type_fn=int):
    return type_fn(input(question + ": "))

new_client_input = [
    ask("–í—ñ–∫", int),
    ask("–ú—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥ (–≥—Ä–Ω)", float),
    ask("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—å", int),
    ask("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–∏—Ö –∫–∞—Ä—Ç", int),
    ask("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–Ω–∫—Ä—É—Ç—Å—Ç–≤", int),
    ask("–ë–∞–∂–∞–Ω–∞ —Å—É–º–∞ –∫—Ä–µ–¥–∏—Ç—É (–≥—Ä–Ω)", float),
    ask("–°—Ç–∞–∂ —Ä–æ–±–æ—Ç–∏ (—Ä–æ–∫–∏)", float),
    ask("–Ü–ø–æ—Ç–µ–∫–∞ (1 - —î, 0 - –Ω–µ–º–∞)", int),
    ask("–û—Å–≤—ñ—Ç–∞ (0=–Ω–µ–º–∞—î, 1=—à–∫–æ–ª–∞, 2=–∫–æ–ª–µ–¥–∂, 3=–≤–∏—â–∞)", int),
    ask("–í–ª–∞—Å–Ω–µ –∞–≤—Ç–æ (1 - —Ç–∞–∫, 0 - –Ω—ñ)", int)
]
new_df = pd.DataFrame([new_client_input], columns=features)
new_client_scaled = scaler.transform(new_df)

# üìê –û–±—á–∏—Å–ª–µ–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–µ—Ñ–æ–ª—Ç—É —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å sklearn
sklearn_prob = model.predict_proba(new_client_scaled)[0][1]

# üì§ –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–æ—Ä–∏–Ω–≥—É:")
print(f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç—É (–º–æ–¥–µ–ª—å sklearn): {sklearn_prob:.4f}")

if sklearn_prob >= 0.7:
    risk = "üî¥ –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫ (–≤—ñ–¥–º–æ–≤–∞)"
elif sklearn_prob >= 0.4:
    risk = "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∏–∑–∏–∫ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ä—É—á–Ω—É)"
else:
    risk = "üü¢ –ù–∏–∑—å–∫–∏–π —Ä–∏–∑–∏–∫ (—Å—Ö–≤–∞–ª–µ–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–µ)"

print(f"–†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {risk}")
